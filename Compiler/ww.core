data $Int.0 = Int(x)
$worker_fibonacci.0 = 
    \<$x.0> -> case ($x.0) as $_.0 of {
        _ -> case ($x.0) as $x_boxed.0 of {
            Int($x.1) -> case ({% I32Sub | 1, $x.1 %}) as $r.0 of {
                _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $x_boxed.0 of {
                    Int($x.1) -> case ($x.0) as $x_boxed.0 of {
                        Int($x.2) -> case ({% I32Sub | 2, $x.2 %}) as $r.0 of {
                            _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $y_boxed.0 of {
                                Int($y.0) -> case ({% I32Add | $y.0, $x.1 %}) as $r.0 of {
                                    _ -> $Int.0 ($r.0)
                                }
                            }
                        }
                    }
                }
            }
        }
        Int($.0) -> case ($.0) as $.0 of {
            _ -> case ($x.0) as $x_boxed.0 of {
                Int($x.1) -> case ({% I32Sub | 1, $x.1 %}) as $r.0 of {
                    _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $x_boxed.0 of {
                        Int($x.1) -> case ($x.0) as $x_boxed.0 of {
                            Int($x.2) -> case ({% I32Sub | 2, $x.2 %}) as $r.0 of {
                                _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $y_boxed.0 of {
                                    Int($y.0) -> case ({% I32Add | $y.0, $x.1 %}) as $r.0 of {
                                        _ -> $Int.0 ($r.0)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            0 -> $Int.0 (1)
            1 -> $Int.0 (1)
        }
    }

$fibonacci.0 = 
    \<$x.0> -> case ($x.0) as $var.0 of {
        _ -> $worker_fibonacci.0 ($var.0)
        Int($v.0) -> case ($spec_call.0 ($v.0)) as $eval.0 of {
            _ -> $Int.0 ($eval.0)
        }
    }

$spec_call.0 = 
    \<$lam.0> -> case ($Int.0 ($lam.0)) as $x.0 of {
        _ -> case (case ($x.0) as $_.0 of {
            _ -> case ($x.0) as $x_boxed.0 of {
                Int($x.1) -> case ({% I32Sub | 1, $x.1 %}) as $r.0 of {
                    _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $x_boxed.0 of {
                        Int($x.1) -> case ($x.0) as $x_boxed.0 of {
                            Int($x.2) -> case ({% I32Sub | 2, $x.2 %}) as $r.0 of {
                                _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $y_boxed.0 of {
                                    Int($y.0) -> case ({% I32Add | $y.0, $x.1 %}) as $r.0 of {
                                        _ -> $Int.0 ($r.0)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Int($.0) -> case ($.0) as $.0 of {
                _ -> case ($x.0) as $x_boxed.0 of {
                    Int($x.1) -> case ({% I32Sub | 1, $x.1 %}) as $r.0 of {
                        _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $x_boxed.0 of {
                            Int($x.1) -> case ($x.0) as $x_boxed.0 of {
                                Int($x.2) -> case ({% I32Sub | 2, $x.2 %}) as $r.0 of {
                                    _ -> case ($fibonacci.0 ($Int.0 ($r.0))) as $y_boxed.0 of {
                                        Int($y.0) -> case ({% I32Add | $y.0, $x.1 %}) as $r.0 of {
                                            _ -> $Int.0 ($r.0)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                0 -> $Int.0 (1)
                1 -> $Int.0 (1)
            }
        }) as $bind.0 of {
            Int($result.0) -> $result.0
        }
    }

$worker_.0 = 
    \<$.0> -> case ($fibonacci.0 ($Int.0 ($.0))) as $.0 of {
        Int($.0) -> $.0
    }

$.0 = 
    \<$.0> -> $worker_.0 ($.0)

$add.0 = 
    \<$x_boxed.0> -> \<$y_boxed.0> -> case ($x_boxed.0) as $x_boxed.0 of {
        Int($x.0) -> case ($y_boxed.0) as $y_boxed.0 of {
            Int($y.0) -> case ({% I32Add | $y.0, $x.0 %}) as $r.0 of {
                _ -> $Int.0 ($r.0)
            }
        }
    }

$sub.0 = 
    \<$x_boxed.0> -> \<$y_boxed.0> -> case ($x_boxed.0) as $x_boxed.0 of {
        Int($x.0) -> case ($y_boxed.0) as $y_boxed.0 of {
            Int($y.0) -> case ({% I32Sub | $y.0, $x.0 %}) as $r.0 of {
                _ -> $Int.0 ($r.0)
            }
        }
    }
