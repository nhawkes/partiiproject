data $Int.0 = Int(x)
data $Bool.0 = Bool(x)
$gcd.0 = 
    \<$a.0> -> \<$b.0> -> let rec 
         in 
        case ($equals.0 ($a.0) ($b.0)) as $.0 of {
            Bool($.0) -> case ($.0) as $.0 of {
                _ -> $a.0
                0 -> let rec 
                     in 
                    case ($lessThan.0 ($a.0) ($b.0)) as $.0 of {
                        Bool($.0) -> case ($.0) as $.0 of {
                            _ -> $gcd.0 ($b.0) ($a.0)
                            0 -> $gcd.0 ($b.0) ($sub.0 ($a.0) ($b.0))
                        }
                    }
            }
        }

$.0 = 
    \<$.0> -> \<$.1> -> case ($gcd.0 ($Int.0 ($.0)) ($Int.0 ($.1))) as $.0 of {
        Int($.0) -> $.0
    }

$add.0 = 
    \<$x_boxed.0> -> \<$y_boxed.0> -> case ($x_boxed.0) as $x_boxed.0 of {
        Int($x.0) -> case ($y_boxed.0) as $y_boxed.0 of {
            Int($y.0) -> case ({% I32Add | $y.0, $x.0 %}) as $r.0 of {
                _ -> $Int.0 ($r.0)
            }
        }
    }

$sub.0 = 
    \<$x_boxed.0> -> \<$y_boxed.0> -> case ($x_boxed.0) as $x_boxed.0 of {
        Int($x.0) -> case ($y_boxed.0) as $y_boxed.0 of {
            Int($y.0) -> case ({% I32Sub | $y.0, $x.0 %}) as $r.0 of {
                _ -> $Int.0 ($r.0)
            }
        }
    }

$equals.0 = 
    \<$x_boxed.0> -> \<$y_boxed.0> -> case ($x_boxed.0) as $x_boxed.0 of {
        Int($x.0) -> case ($y_boxed.0) as $y_boxed.0 of {
            Int($y.0) -> case ({% I32Eq | $y.0, $x.0 %}) as $r.0 of {
                _ -> $Bool.0 ($r.0)
            }
        }
    }

$lessThan.0 = 
    \<$x_boxed.0> -> \<$y_boxed.0> -> case ($x_boxed.0) as $x_boxed.0 of {
        Int($x.0) -> case ($y_boxed.0) as $y_boxed.0 of {
            Int($y.0) -> case ({% I32LtS | $y.0, $x.0 %}) as $r.0 of {
                _ -> $Bool.0 ($r.0)
            }
        }
    }
